{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","largestId","classNames","completed","title","id","TodoList","todos","arrId","map","Math","max","username","getUser","userId","usersFromServer","find","App","useState","selectUserId","setSelectUserId","submit","setSubmit","setTitle","todoList","setTodoList","action","method","onSubmit","e","preventDefault","placeholder","type","value","onChange","target","disabled","onClick","newTodo","random","addTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4ca8eb40.chunk.js","sourcesContent":["import { User } from '../../types/UserType';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","/* eslint-disable no-console */\nimport classNames from 'classnames';\nimport { Todo } from '../../types/TodoType';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n  largestId: number;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo, largestId }) => {\n  return (\n    <article\n      data-id={largestId + 1}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': todo.completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && <UserInfo key={todo.user.id} user={todo.user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/TodoType';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  const arrId = todos.map(todo => todo.id);\n\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} largestId={Math.max(...arrId)} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import './App.scss';\nimport { useState } from 'react';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nfunction getUser(userId: number) {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nconst todos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [selectUserId, setSelectUserId] = useState('0');\n  const [submit, setSubmit] = useState(false);\n  const [title, setTitle] = useState('');\n  const [todoList, setTodoList] = useState(todos);\n\n  const addTodo = () => {\n    const newTodo = {\n      id: Math.random(),\n      title,\n      completed: false,\n      userId: +selectUserId,\n      user: getUser(+selectUserId),\n    };\n\n    setTodoList([...todoList, newTodo]);\n\n    setTitle('');\n    setSelectUserId('0');\n    setSubmit(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(e) => {\n          e.preventDefault();\n        }}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              placeholder=\"Enter a title\"\n              type=\"text\"\n              data-cy=\"titleInput\"\n              value={title}\n              onChange={(e) => {\n                setTitle(e.target.value);\n              }}\n            />\n          </label>\n          {(!title && submit) && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={selectUserId}\n              onChange={(e) => {\n                setSelectUserId(e.target.value);\n              }}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n              {usersFromServer.map(user => (\n                <option key={user.id} value={`${user.id}`}>{user.name}</option>\n              ))}\n            </select>\n          </label>\n\n          {(submit && selectUserId === '0') && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={() => {\n            if (selectUserId !== '0' && title) {\n              return addTodo();\n            }\n\n            return setSubmit(true);\n          }}\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todoList} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}